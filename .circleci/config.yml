# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build-and-deploy:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # We can attach specific commits of other repositories and include them
      # in our documentation.  This can be used as much, or as little, as
      # desired - it's just another PoC
      # debug the infrastructure required to do it.
      - run:
          name: bring submodules down
          command: |
            git submodule update --init

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./toolkit/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv toolkit/venv
            . toolkit/venv/bin/activate
            cd toolkit
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./toolkit/venv
          key: v1-dependencies-{{ checksum "./toolkit/requirements.txt" }}

      - run:
          name: install latest tool
          command: |
            . toolkit/venv/bin/activate
            cd toolkit
            pip install -e .
            tool --dir ~/repo db-to-yaml

      - run:
          name: run mkdocs
          command: |
            . toolkit/venv/bin/activate
            cd toolkit
            mkdocs build

      - run:
          name: push data to master and trigger jekyll build phase
          command: |
            if [ "${CIRCLE_BRANCH}" == "documentation" ]; then
              git config user.email "eric@korsimoro.com"
              git config user.name "CircleCI Build"
              echo "First Status"
              git status
              echo "Adding all"
              git add .
              echo "Committing"
              git commit -a -m "Publishing Update From CircleCI"
              echo "Second Status"
              git status
              echo "Go back to master"
              git checkout master
              echo "Pull built documentation forward"
              git merge -X theirs documentation -m "Merging Documentation"
              echo "Trigger deployment"
              git push origin master
              echo "Cleanup"
              git checkout documentation
            fi

      #- store_artifacts:
      #    path: test-reports
      #    destination: test-reports

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-deploy:
          filters:
            branches:
              only: documentation
